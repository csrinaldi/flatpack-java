/*
 * #%L
 * FlatPack Automatic Source Tool
 * %%
 * Copyright (C) 2012 Perka Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
entityHeader(entity) ::= <<
// Generated File - DO NOT EDIT

#import \<Foundation/Foundation.h\>
#import \<CoreData/CoreData.h\>
#import "FPHasUuid.h"
<if(entity.supertype.requireName)>
#import "<entity.supertype.requireName>.h"
<endif>

<entity.importNames:{n | @class <n>;}; wrap, separator="\n">

<docString(entity.docString)>
@interface <entity.requireName> : <entity.supertype.requireName>

<if(entity.properties)>
<entity.properties:property(); separator="\n\n">
<endif>

@end

>>

entity(entity) ::= <<
// Generated File - DO NOT EDIT

<entity.importNames:{n | #import "<n>.h"}; wrap, separator="\n">
#import "FPEntityDescription.h"
#import "FPProperty.h"
#import "NSObject+FP.h"

@implementation <entity.requireName>

<entity.properties:{p | @dynamic <p.safeName>;}; separator="\n">

static FPEntityDescription *_entityDescription;
static NSMutableArray *_allProperties;

+ (void)load {
  [super load];
  
  _allProperties = [NSMutableArray array];
  <entity.properties:propertyAdd(); separator="\n\n">
  
  _entityDescription = [FPEntityDescription newWithDictionary:@{
    @"typeName":@"<entity.typeName>",
    @"superType":[<entity.supertype.requireName> entityDescription],
    @"kind":[<entity.requireName> class],
    @"properties":_allProperties 
  }];
  
  [FPEntityDescription setEntityDescription:_entityDescription forName:@"<entity.typeName>"];
}

+ (FPEntityDescription *)entityDescription {
  return _entityDescription;
}

@end
>>

propertyDynamic(property) ::= <%
@dynamic <property.safeName>;
%>

property(property) ::= <%
<if(property.docString)><docString(property.docString)><\n><endif>
@property (<property.modifiers:{m | <m>}; separator=", ">) <property.objcType> *<property.safeName>;
%>

propertyAdd(property) ::= <<
// <property.name>
[_allProperties addObject:
  [FPProperty setPropertyForUuid:@"<property.uuid>"
                  withDictionary:@{
                    @"name":@"<property.name>",
                    <if(property.embedded)>@"embedded":@YES,<endif>
                    @"kind":[<property.objcType> class]<if(property.impliedProperty)>,<endif>
                    <if(property.impliedProperty)>@"impliedProperty":[FPProperty propertyForUuid:@"<property.impliedProperty.uuid>"]<endif>
                  }]];
>>

/**
 * Emit a doc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)>/** <docString.chunks; wrap="\n*   ", separator=" ">
*/<endif>
>>

endpointDeclaration(endpoint) ::= <<
<endpoint.methodName>
>>

endpointRequestInterface(endpoint) ::= <<
@interface <endpoint.requestBuilderClassName> : FPFlatpackRequest
  <endpoint.queryParameters:{p | -(<endpoint.requestBuilderClassName> *)with<p.requireName>:(NSString *)<p.name>;}; separator="\n">
  -(<endpoint.entityReturnType>)execute;
  -(void)executeUsingBlock:(<endpoint.requestBuilderBlockName>)block;
@end
>>

endpointRequestImplementation(endpoint) ::= <<
@implementation <endpoint.requestBuilderClassName>
  <if(endpoint.queryParameters)>
  <endpoint.queryParameters:endpointWithMethod(); separator="\n\n">
  
  <endif>
  -(<endpoint.entityReturnType>)execute {
    return [self baseExecute];
  }
  
  -(void)executeUsingBlock:(<endpoint.requestBuilderBlockName>)block {
    [self baseExecuteUsingBlock:^(id result) {
      if(block != nil) block(result);
    }];
  }
@end
>>

endpointWithMethod(p) ::= <<
 -(<endpoint.requestBuilderClassName> *)with<p.requireName>:(NSString *)<p.name> {
    [self setQueryParameterWithName:@"<p.name>" value:<p.name>];
    return self;
  }
>>

apiHeader(api) ::= <<
// Generated File - DO NOT EDIT

#import \<Foundation/Foundation.h\>
#import "FPBaseApi.h"
#import "FPHasUuid.h"
#import "FPFlatpackRequest.h"

<api.importNames:{n | @class <n>;}; separator="\n">

<api.endpoints:{e | typedef void(^<e.requestBuilderBlockName>)(<if(e.entityReturnType)><e.entityReturnType><e.entityReturnName><endif>);}; separator="\n">

<api.endpoints:endpointRequestInterface(); separator="\n\n">

@interface <names.classPrefix>BaseApi : FPBaseApi

<api.endpoints:{e | 
  <docString(e.docString)>
  <endpointDeclaration(e)>;
 }; separator="\n">

@end

>>

api(api) ::= <<
// Generated File - DO NOT EDIT

#import "<names.classPrefix>BaseApi.h"
#import "NSObject+FP.h"
#import "<names.classPrefix>Schema.h"
<api.importNames:{n | #import "<n>.h"}; separator="\n">

<api.endpoints:endpointRequestImplementation(); separator="\n\n">

@implementation <names.classPrefix>BaseApi

// Initialize with <names.classPrefix>Schema generated NSManagedObjectModel
- (id) init {
  self = [super initWithManagedObjectModel:[<names.classPrefix>Schema managedObjectModel]];
    
  return self;
}

<api.endpoints:{end |
  <endpointDeclaration(end)> {
    <end.requestBuilderClassName> *request = [[<end.requestBuilderClassName> alloc] initWithApi:self
      method:@"<end.method>"
      path:@"<end.pathDecoded>"<if(!end.pathParameters)>];<endif>
    <if(end.pathParameters)>
      pathArgs:@[<end.pathParameters:{x|<x.name>}; separator=", ">]];
    <endif>
    <if(end.entity)>[request setEntity:<end.entity.name>];<endif>
    return request; 
  \}}; separator="\n\n">
@end
>>

schemaHeader() ::= <<
// Generated File - DO NOT EDIT

#import \<Foundation/Foundation.h\>
#import \<CoreData/CoreData.h\>
  
@interface <names.classPrefix>Schema : NSObject
  
+ (NSManagedObjectModel *) managedObjectModel;
    
@end
>>

schema(entities) ::= <<
// Generated File - DO NOT EDIT

#import "<names.classPrefix>Schema.h"

@implementation <names.classPrefix>Schema
  
+ (NSManagedObjectModel *) managedObjectModel {
  NSManagedObjectModel *mom = [[NSManagedObjectModel alloc] init];
  NSMutableArray *entities = [NSMutableArray array];
  
  // ***** Initialize all entity objects up front so they can reference each other *****
  
  <entities:entityInit(); separator="\n">
  
  <entities:entityPropertiesInit(); separator="">
  
  <entities:schemaForEntity(); separator="\n\n">
  
  // ***** Build entity graph top-down. *****
  <entities:entitySubentities(); separator="">
  
  [mom setEntities:entities];
  return mom;
}
  
@end
>>

entityPropertiesInit(entity) ::= <<
<if(entity.attributes)>
<entity.attributes:attributeInit(entity.typeName); separator="\n">
<endif>
<if(entity.relationships)>
<entity.relationships:relationshipInit(entity.typeName); separator="\n">
<endif>
>>

entityInit(entity) ::= <<
NSEntityDescription *<entity.typeName>Entity = [[NSEntityDescription alloc] init];
>>

relationshipInit(property, prefix) ::= <%
NSRelationshipDescription *<prefix><property.nameCapitalized>Relationship = [[NSRelationshipDescription alloc] init];
%>

attributeInit(property, prefix) ::= <%
NSAttributeDescription *<prefix><property.nameCapitalized>Attribute = [[NSAttributeDescription alloc] init];
%>

entitySubentities(entity) ::= <<
<if(entity.subentities)>

NSMutableArray *<entity.typeName>Subentities = [NSMutableArray array];
<entity.subentities:subEntityRelationships(entity.typeName); separator="\n">
[<entity.typeName>Entity setSubentities:<entity.typeName>Subentities];<endif>
>>

schemaForEntity(entity) ::= <<
// ***** Entity: <entity.typeName> *****

[<entity.typeName>Entity setName:@"<entity.typeName>"];
[<entity.typeName>Entity setManagedObjectClassName:@"<names.classPrefix><entity.typeNameCapitalized>"];
[entities addObject:<entity.typeName>Entity];

NSMutableArray *<entity.typeName>Properties = [NSMutableArray array];

// Attribute: uuid
NSAttributeDescription *<entity.typeName>UuidAttribute = [[NSAttributeDescription alloc] init];
[<entity.typeName>UuidAttribute setName:@"uuid"];
[<entity.typeName>UuidAttribute setAttributeType:NSStringAttributeType];
[<entity.typeName>UuidAttribute setOptional:NO];
[<entity.typeName>UuidAttribute setIndexed:YES];
[<entity.typeName>Properties addObject:<entity.typeName>UuidAttribute];
<if(entity.properties)>
<if(entity.attributes)>

<entity.attributes:attributeDescription(entity.typeName); separator="\n\n"><endif>
<if(entity.relationships)>

<entity.relationships:relationshipDescription(entity.typeName); separator="\n\n"><endif>
<endif>


[<entity.typeName>Entity setProperties:<entity.typeName>Properties];
>>

subEntityRelationships(subentityName, arrayPrefix) ::= <%
[<arrayPrefix>Subentities addObject:<subentityName>Entity];
%>

attributeDescription(property, propertiesPrefix) ::= <<
// Attribute: <property.name> 
[<propertiesPrefix><property.nameCapitalized>Attribute setName:@"<property.name>"];
[<propertiesPrefix><property.nameCapitalized>Attribute setAttributeType:<property.attributeType>];
[<propertiesPrefix><property.nameCapitalized>Attribute setOptional:YES];
[<propertiesPrefix><property.nameCapitalized>Attribute setIndexed:NO];
[<propertiesPrefix>Properties addObject:<propertiesPrefix><property.nameCapitalized>Attribute];
>>

relationshipDescription(property, propertiesPrefix) ::= <<
// Relationship: <property.name>
[<propertiesPrefix><property.nameCapitalized>Relationship setName:@"<property.name>"];
[<propertiesPrefix><property.nameCapitalized>Relationship setOptional:YES];
[<propertiesPrefix><property.nameCapitalized>Relationship setIndexed:NO];
[<propertiesPrefix><property.nameCapitalized>Relationship setDestinationEntity:<property.relationshipTargetType>Entity];
[<propertiesPrefix><property.nameCapitalized>Relationship setMinCount:0];
[<propertiesPrefix><property.nameCapitalized>Relationship setMaxCount:<property.cardinality>];
<if(property.inverseRelationship)>
[<propertiesPrefix><property.nameCapitalized>Relationship setInverseRelationship:<property.inverseRelationship.ownerEntity.typeName><property.inverseRelationship.nameCapitalized>Relationship];
<endif>
[<propertiesPrefix>Properties addObject:<propertiesPrefix><property.nameCapitalized>Relationship];
>>