module(requires) ::= <<
# Generated File - DO NOT EDIT

<requires:{x |require "<x>"}; wrap, separator="\n">
>>

version() ::= <<
# Generated File - DO NOT EDIT

module <names.moduleName>
  VERSION = "<names.gemVersion>"
end
>>

entity(entity) ::= <<
# Generated File - DO NOT EDIT

<if(entity.supertype.requireName)>
require '<entity.supertype.requireName>'
<endif>

module <names.moduleName>
  module <names.modelModuleName> 

    <docString(entity.docString)>
    class <entity.simpleName> <if(entity.supertype.simpleName)>\< <entity.supertype.simpleName><endif>
  
      <entity.properties:field(); separator="\n">
    
    end
  end
end
>>

enum(enum, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(enum.docString)>
public enum <enum> {
  <enum.enumValues:{x |<x>}; separator=",\n">;
}
>>

field(property) ::= <%
<docString(property.docString)>

attr_accessor :<property.attrName>
%>

/**
 * Emit a doc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)>
# <docString.chunks; wrap="\n# ", separator=" ">
<endif>
>>

/**
 * Create property security annotation. The kind parameter should be a string
 * either "getter" or "setter".  The property.({template}) allows for dynamic lookup
 * based on the value of kind.
 */
propertyRoles(kind) ::= <%
<if(property.({<kind>PermitAll}))>
  @<names.PermitAll>
<elseif(property.({<kind>RoleNames}))>
  @<names.RolesAllowed>({<property.({<kind>RoleNames}):{x|"<x>"}; separator=", ">})
<endif>
%>

/**
 * Generate an API accessor stub.
 */
api(api) ::= <<
# Generated File - DO NOT EDIT
require 'flatpack_core'

module <names.moduleName>
  class Api \< Flatpack::Client::BaseApi
  
    def initialize(flatpack)
      @flatpack = flatpack
    end
      
    <api.endpoints:endpoint(); separator="\n">
      
  end
end
>>

/**
 * Select the kind of endpoint, either one that's documented to return a FlatPackEntity
 * or just return a HttpURLConnection for anything else.
 */
endpoint(end) ::= <%
<if(end.returnType)>
  <endpointFlatPack(end)>
<else>
  <endpointConnectionResponse(end)>
<endif> 
%>

/**
 * Generates interfaces and methods for API methods that don't use flatpack.
 */
endpointConnectionResponse(end) ::= <<
public interface <end.javaNameUpcase> extends <names.Request>\<<end.javaNameUpcase>, <names.HttpURLConnection>\> {
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
}

private class <end.javaNameUpcase>Impl
    extends <names.ConnectionRequestBase>\<<end.javaNameUpcase>\>
    implements <end.javaNameUpcase> {
  public <end.javaNameUpcase>Impl(Object... args) {
    super(<namePrefix>Api.this, "<end.method>", "<end.pathDecoded>", args);
  }
  <end.queryParameters:endpointQueryParameterImpl(); separator="\n">
}

<docString(end.docString)>
public <end.javaNameUpcase> <end.javaName>(<endpointArgList()>) {
  <end.javaNameUpcase>Impl toReturn =
      new <end.javaNameUpcase>Impl(<end.pathParameters:{x|<x.name>}; separator=", ">);
  <if(end.entity)>toReturn.setEntity(entity);<endif>
  return toReturn;
}
>>

/**
 * Generates interfaces and methods for API methods that are fully-flatpacked.
 */
endpointFlatPack(end) ::= <<
public interface <end.javaNameUpcase> extends <names.FlatPackRequest>\<<end.javaNameUpcase>, <end.returnType>\> {
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
}

private class <end.javaNameUpcase>Impl
    extends <names.FlatPackRequestBase>\<<end.javaNameUpcase>, <end.returnType>\>
    implements <end.javaNameUpcase> {
  public <end.javaNameUpcase>Impl(Object... args) {
    super(<namePrefix>Api.this, <endpointCreateType(end.returnType)>, "<end.method>", "<end.pathDecoded>", args);
  }
  <end.queryParameters:endpointQueryParameterImpl(); separator="\n">
}

<docString(end.docString)>
public <end.javaNameUpcase> <end.javaName>(<endpointArgList()>) {
  <end.javaNameUpcase>Impl toReturn =
      new <end.javaNameUpcase>Impl(<end.pathParameters:{x|<x.name>}; separator=", ">);
  <if(end.entity)>toReturn.setEntity(entity);<endif>
  return toReturn;
}
>>

endpointArgList() ::= <%
<if(end.entity && end.pathParameters)>
  <end.entity> entity, <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<elseif(end.entity)>
  <end.entity> entity
<else>
  <end.pathParameters:{x |<x.type> <x.name>}; separator=", ">
<endif>
%>

/**
 * Make a call to FlatPackTypes.createType() for a synthetic Type reference.
 */
endpointCreateType(type) ::= <%
<names.FlatPackTypes>.createType(<type.flatTypes:{x|<x>.class}; separator=", ">)
%>

/**
 * The names of the path parameter arguments.
 */
endpointPathParameters() ::= <%
<end.pathParameters:{x |<x.name>}; separator=", ">
%>

/**
 * Create a stub method declaration for a request interface.
 */
endpointQueryParameterStub(param) ::= <<
<docString(param.docString)>
<end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>);
>>

endpointQueryParameterImpl(param) ::= <<
public <end.javaNameUpcase> with<param.javaNameUpcase>(<param.type> <param.name>) {
  return queryParameter("<param.name>", <param.name>);
}
>>

typeSource(allEntities, packageName, namePrefix) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;
public class <namePrefix>TypeSource implements <names.TypeSource> {
  private static final <names.Set>\<Class\<?\>\> classes = <names.Collections>.unmodifiableSet(
    new <names.HashSet>\<Class\<?\>\>(<names.Arrays>.\<Class\<?\>\>asList(
      <allEntities:{x |<x>.class}; wrap, separator=", ">
    )));
  private static final <names.TypeSource> instance = new <namePrefix>TypeSource();
  
  public static <names.TypeSource> get() {
    return instance;
  }

  public <names.Set>\<Class\<?\>\> getTypes() {
    return classes;
  }
  
  private <namePrefix>TypeSource(){}
}
>>
