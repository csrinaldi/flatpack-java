module(requires) ::= <<
# Generated File - DO NOT EDIT

<requires:{x |require "<x>"}; wrap, separator="\n">
>>

version() ::= <<
# Generated File - DO NOT EDIT

module <names.moduleName>
  VERSION = "<names.gemVersion>"
end
>>

entity(entity) ::= <<
# Generated File - DO NOT EDIT

<if(entity.supertype.requireName)>
require '<entity.supertype.requireName>'
<endif>

module <names.moduleName>
  module <names.modelModuleName> 

    <docString(entity.docString)>
    class <entity.simpleName> \< <entity.supertype.simpleName>
    
      <entity.properties:field(); separator="\n">
    
    end
  end
end
>>

enum(enum, packageName) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;

<docString(enum.docString)>
public enum <enum> {
  <enum.enumValues:{x |<x>}; separator=",\n">;
}
>>

field(property) ::= <%

<docString(property.docString)>
attr_accessor :<property.attrName>

%>

/**
 * Emit a doc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)># <docString.chunks; wrap="\n# ", separator=" "><endif>
>>

/**
 * Create property security annotation. The kind parameter should be a string
 * either "getter" or "setter".  The property.({template}) allows for dynamic lookup
 * based on the value of kind.
 */
propertyRoles(kind) ::= <%
<if(property.({<kind>PermitAll}))>
  @<names.PermitAll>
<elseif(property.({<kind>RoleNames}))>
  @<names.RolesAllowed>({<property.({<kind>RoleNames}):{x|"<x>"}; separator=", ">})
<endif>
%>

/**
 * Generate an API accessor stub.
 */
api(api) ::= <<
# Generated File - DO NOT EDIT
require 'flatpack_client'

module <names.moduleName>
  class Api \< Flatpack::Client::BaseApi
  
    def initialize(flatpack)
      @flatpack = flatpack
    end
      
    <api.endpoints:endpoint(); separator="\n">
    private
    
    <api.endpoints:endpointPrivate()>
  end
end
>>

/**
 * Select the kind of endpoint, either one that's documented to return a FlatPackEntity
 * or just return a HttpURLConnection for anything else.
 */
endpoint(end) ::= <<
<docString(end.docString)>
def <end.methodName><endpointArgList()>
  <if(end.queryParameters)>
  to_return = <end.className>.new(self<if(end.pathParameters)>, <end.pathParameters:{x|<x.name>}; separator=", "><endif>)
  <else>
  to_return = Flatpack::Client::<if(end.returnType)>FlatpackRequest<else>ConnectionRequest<endif>.new(self, "<end.method>", "<end.pathDecoded>"<if(end.pathParameters)>, <end.pathParameters:{x|<x.name>}; separator=", "><endif>)
  <endif>
  <if(end.entity)>to_return.entity = entity<endif>
  to_return
end

>>

endpointPrivate(end) ::= <<
<if(end.queryParameters)>
class <end.className> \< Flatpack::Client::<if(end.returnType)>FlatpackRequest<else>ConnectionRequest<endif>
    
  def initialize(api, *args)
    super(api, "<end.method>", "<end.pathDecoded>", *args)
  end
      
  <end.queryParameters:endpointQueryParameterStub(); separator="\n">
end
    
<endif>
>>

endpointArgList() ::= <%
<if(end.entity && end.pathParameters)>
  (entity, <end.pathParameters:{x |<x.name>}; separator=", ">)
<elseif(end.entity)>
  (entity)
<elseif(end.pathParameters)>
  (<end.pathParameters:{x |<x.name>}; separator=", ">)
<endif>
%>

/**
 * Make a call to FlatPackTypes.createType() for a synthetic Type reference.
 */
endpointCreateType(type) ::= <%
<names.FlatPackTypes>.createType(<type.flatTypes:{x|<x>.class}; separator=", ">)
%>

/**
 * The names of the path parameter arguments.
 */
endpointPathParameters() ::= <%
<end.pathParameters:{x |<x.name>}; separator=", ">
%>

endpointQueryParameterStub(param) ::= <<
<docString(param.docString)>
def with_<param.underscoreName>(<param.underscoreName>)
  query_parameter('<param.name>', <param.underscoreName>);
end

>>

typeSource(allEntities, packageName, namePrefix) ::= <<
// Generated File - DO NOT EDIT
package <packageName>;
public class <namePrefix>TypeSource implements <names.TypeSource> {
  private static final <names.Set>\<Class\<?\>\> classes = <names.Collections>.unmodifiableSet(
    new <names.HashSet>\<Class\<?\>\>(<names.Arrays>.\<Class\<?\>\>asList(
      <allEntities:{x |<x>.class}; wrap, separator=", ">
    )));
  private static final <names.TypeSource> instance = new <namePrefix>TypeSource();
  
  public static <names.TypeSource> get() {
    return instance;
  }

  public <names.Set>\<Class\<?\>\> getTypes() {
    return classes;
  }
  
  private <namePrefix>TypeSource(){}
}
>>
