/*
 * #%L
 * FlatPack Automatic Source Tool
 * %%
 * Copyright (C) 2012 Perka Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
 
entity(entity) ::= <<
\<?php
// Generated File - DO NOT EDIT

class <entity.requireName><if(entity.supertype.requireName)> extends <entity.supertype.requireName><endif> {

  <if(entity.properties)>
  <entity.properties:property(); separator="\n">
  <endif>
  
  private static $_entityDescription;
  private static $_allProperties;

  <if(entity.collectionProperties || entity.supertype.requireName)>
  // initialize collection properties
  function __construct() {
    <if(entity.supertype.requireName)>parent::__construct();<endif>
    <if(entity.collectionProperties)><entity.collectionProperties:{p | if(!isset($this->_<p.name>)) $this->_<p.name> = array();}; separator="\n"><endif>
  }
  <endif>

  public static function initialize() {
    
    self::$_allProperties = array();
    <entity.properties:propertyAdd(); separator="\n\n">
  
    self::$_entityDescription = FPEntityDescription::newWithDictionary(
      array(
        "typeName" => "<entity.typeName>",
        "superType" => <entity.supertype.requireName>::entityDescription(),
        "kind" => "<entity.requireName>",
        "properties" => self::$_allProperties)); 
    
    FPEntityDescription::setEntityDescription(self::$_entityDescription, "<entity.typeName>");
  }

  public static function entityDescription() {
    return self::$_entityDescription;
  }
  <entity.properties:entityAccessors()>
}

<entity.requireName>::initialize();
?\>
>>
 
entityAccessors(property) ::= <<
<if(property.type.listElement)>

// <property.safeName> one-to-many accessors to maintain bi-directional relationships
public function <property.safeName>() {
  return $this->_<property.safeName>;
}
public function set<property.upcaseName>($<property.safeName>) {
  $this->_<property.safeName> = (array)$<property.safeName>;
  <if(property.impliedProperty)>
  foreach($this->_<property.safeName> as $obj){
    $obj->set<property.impliedProperty.upcaseName>($this);
  }
  <endif>
}
public function addItemTo<property.upcaseName>($item) {
  array_push($this->_<property.safeName>, $item);
  <if(property.impliedProperty)>
  $item->set<property.impliedProperty.upcaseName>($this);
  <endif>
}
<elseif(property.type.name && property.impliedProperty)>

// <property.safeName> many-to-one accessors to maintain bi-directional relationships
public function <property.safeName>() {
  return $this->_<property.safeName>;
}
public function set<property.upcaseName>($<property.safeName>) {
  $this->_<property.safeName> = $<property.safeName>;
  if(!in_array($this, $this->_<property.safeName>-><property.impliedProperty.name>())) { 
    $this->_<property.safeName>->addItemTo<property.impliedProperty.upcaseName>($this);
  }
}
<else>

// <property.safeName> accessors
public function <property.name>() {
  return $this->_<property.name>;
}
public function set<property.upcaseName>($<property.name>) {
  $this->_<property.name> = $<property.name>;
} 
<endif>
>>

property(property) ::= <%
private $_<property.safeName>;
%>

propertyAdd(property) ::= <<
// <property.name>
array_push(self::$_allProperties,
  FPProperty::setPropertyForUuid("<property.uuid>",
    <if(property.impliedProperty)>
    array(
      "name" => "<property.safeName>",
      "embedded" => <if(property.embedded)>true<else>false<endif>,
      "kind" => "<property.phpType>",
      "impliedProperty" => FPProperty::propertyForUuid("<property.impliedProperty.uuid>"))));<else>
    array(
      "name" => "<property.safeName>",
      "embedded" => <if(property.embedded)>true<else>false<endif>,
      "kind" => "<property.phpType>")));<endif>
>>

/**
 * Emit a doc string, reflowed to fit the current context.
 */
docString(docString) ::= <<
<if(docString)>/** <docString.chunks; wrap="\n*   ", separator=" ">
*/<endif>
>>

endpointDeclaration(endpoint) ::= <<
<endpoint.methodName>
>>

endpointRequestInterface(endpoint) ::= <<
@interface <endpoint.requestBuilderClassName> : FPFlatpackRequest
  <endpoint.queryParameters:{p | -(<endpoint.requestBuilderClassName> *)with<p.requireName>:(NSString *)<p.name>;}; separator="\n">
  -(<endpoint.entityReturnType>)execute;
  -(void)executeUsingBlock:(<endpoint.requestBuilderBlockName>)block;
@end
>>

endpointRequestImplementation(endpoint) ::= <<
class <endpoint.requestBuilderClassName> extends FPFlatpackRequest {
  <if(endpoint.queryParameters)>
  <endpoint.queryParameters:endpointWithMethod(); separator="\n\n">
  
  <endif>
  public function execute() {
    return $this->baseExecute();
  }
  
}
>>

endpointWithMethod(p) ::= <<
public function with<p.requireName>($<p.name>) {
  $this->setQueryParameterWithName("<p.name>", $<p.name>);
  return $this;
}
>>

apiHeader(api) ::= <<
// Generated File - DO NOT EDIT

#import \<Foundation/Foundation.h\>
#import "FPBaseApi.h"
#import "FPBaseHasUuid.h"
#import "FPFlatpackRequest.h"

<api.importNames:{n | @class <n>;}; separator="\n">

<api.endpoints:{e | typedef void(^<e.requestBuilderBlockName>)(<if(e.entityReturnType)><e.entityReturnType><e.entityReturnName><endif>);}; separator="\n">

<api.endpoints:endpointRequestInterface(); separator="\n\n">

@interface <names.classPrefix>BaseApi : FPBaseApi

<api.endpoints:{e | 
  <docString(e.docString)>
  <endpointDeclaration(e)>;
 }; separator="\n">

@end

>>

api(api) ::= <<
\<?php
// Generated File - DO NOT EDIT

<api.endpoints:endpointRequestImplementation(); separator="\n\n">

class <names.classPrefix>BaseApi extends FPBaseApi {
<api.endpoints:{end |
  <docString(end.docString)>
  <endpointDeclaration(end)> {
    $request = new <end.requestBuilderClassName>();
    $request->initWithApi($this, "<end.method>", "<end.pathDecoded>"<if(end.pathParameters)>, array(<end.pathParameters:{x|$<x.name>}; separator=", ">)<endif>);
    <if(end.entity)>$request->setEntity($<end.entity.name>);<endif>
    return $request; 
  \}}; separator="\n\n">
}
?\>
>>

base(base, dir) ::= <<
\<?php
// Generated File - DO NOT EDIT

$allEntities = array(
  <base :{n | "<n.requireName>"}; separator=",\n">
);


?\>
>>
 